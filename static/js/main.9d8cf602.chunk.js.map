{"version":3,"sources":["components/headerBar.js","components/form/InputCard.js","containers/form.js","components/setting/WebhookPaper.js","components/setting/ResetParameterPaper.js","containers/setting.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","titleTypography","flexGrow","titleLink","textDecoration","color","AdapterLink","React","forwardRef","props","ref","innerRef","HeaderBar","classes","AppBar","position","Toolbar","Typography","className","to","IconButton","component","theme","innerPaper","padding","spacing","InputCard","Paper","variant","title","TextField","placeholder","multiline","fullWidth","rows","rowsMax","value","onChange","event","target","mt20","marginTop","formButton","justifyContent","getInitialContent","key","doneOnSession","window","sessionStorage","getItem","Form","useState","done","setDone","comment","setComment","todo","setTodo","newDone","setItem","newComment","newTodo","Grid","container","direction","justify","alignItems","Button","onClick","today","Date","text","lastCommit","localStorage","toLocaleDateString","url","match","axios","post","headers","then","alert","clear","catch","e","formInnerContainer","formTypography","WebhookPaper","urlOnLocalStorage","setUrl","paperStyle","innerGrid","textAlign","ResetParameterPaper","myGrid","item","xs","removeItem","paperMarginTop","SettingContainer","useStyle","rootContainer","App","Container","maxWidth","path","exact","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d8cf602.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Settings from '@material-ui/icons/Settings';\n\nconst useStyles = makeStyles({\n  titleTypography: {\n    flexGrow: 1\n  },\n  titleLink: {\n    textDecoration: 'none',\n    color: 'white'\n  }\n});\n\nconst AdapterLink = React.forwardRef((props, ref) => <Link innerRef={ref} {...props} />);\n\nfunction HeaderBar () {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography className={classes.titleTypography}>\n          <Link to=\"/\" className={classes.titleLink}>日跨ぎ録</Link>\n        </Typography>\n        <IconButton\n          color=\"inherit\"\n          component={AdapterLink}\n          to=\"/setting\"\n        >\n          <Settings />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default HeaderBar;\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  innerPaper: {\n    padding: theme.spacing(3, 2),\n  }\n}));\n\nfunction InputCard (props) {\n  const classes = useStyles();\n  \n  return (\n    <Paper className={classes.innerPaper}>\n      <Typography\n        variant=\"h5\"\n        component=\"h5\"\n      >{ props.title }</Typography>\n      <TextField\n        placeholder={ props.placeholder }\n        multiline={true}\n        fullWidth={true}\n        rows={1}\n        rowsMax={8}\n        value={props.value}\n        onChange={event => props.onChange(event.target.value)}\n      />\n    </Paper>\n  );\n}\n\nexport default InputCard;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios'\n\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button';\n\nimport InputCard from '../components/form/InputCard'\n\nconst useStyles = makeStyles({\n  mt20: {\n    marginTop: 20,\n  },\n  formButton: {\n    justifyContent: 'center'\n  }\n});\n\nfunction getInitialContent (key) {\n  let doneOnSession = window.sessionStorage.getItem(key);\n  \n  if (doneOnSession === null) {\n    return '';\n  }\n\n  return doneOnSession;\n}\n\nfunction Form () {\n  const [done, setDone] = useState(getInitialContent('done'));\n  const [comment, setComment] = useState(getInitialContent('comment'));\n  const [todo, setTodo] = useState(getInitialContent('todo'));\n\n  const doneChanger = (newDone) => {\n    setDone(newDone);\n    window.sessionStorage.setItem('done', newDone);\n  }\n  const commentChanger = (newComment) => {\n    setComment(newComment);\n    window.sessionStorage.setItem('comment', newComment);\n  }\n  const todoChanger = (newTodo) => {\n    setTodo(newTodo);\n    window.sessionStorage.setItem('todo', newTodo);\n  }\n\n  const messageSender = () => {\n    var today = new Date();\n    var text = '';\n\n    var lastCommit = window.localStorage.getItem('last_commit');\n    if (\n      lastCommit != null &&\n      lastCommit === today.toLocaleDateString()\n    ) {\n      alert('日跨ぎ録の投稿は1日1回までです');\n      return;\n    }\n\n    if (done === '') {\n      alert('今日やったことが入力されていません');\n      return;\n    }\n    text += `*今日やったこと*\\n\\n${done}\\n\\n`;\n\n    if (comment === '') {\n      alert('コメントが入力されていません');\n      return;\n    }\n    text += `*コメント*\\n\\n${comment}\\n\\n`;\n\n    if (todo === '') {\n      alert('翌営業日の予定が入力されていません');\n      return;\n    }\n    text += `*翌営業日の予定*\\n\\n${todo}\\n\\n`;\n\n    const url = window.localStorage.getItem('webhook');\n    if (url === null || !url.match(/^http/g)) {\n      alert('Webhook URLを指定してください');\n      return;\n    }\n    \n    axios\n      .post(url, {\n        text: text\n      }, {\n        headers: { 'content-type': 'application/x-www-form-urlencoded' }\n      })\n      .then(() => {\n        window.localStorage.setItem('last_commit', today.toLocaleDateString());\n        alert('投稿しました');\n\n        setDone('');\n        setComment('');\n        setTodo('');\n        window.sessionStorage.clear();\n      })\n      .catch(e => alert(e))\n  }\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <InputCard\n        title=\"今日やったこと\"\n        placeholder=\"今日やったことを箇条書きします\"\n        value={done}\n        onChange={doneChanger}\n      />\n      <div className={ classes.mt20 }></div>\n      <InputCard\n        title=\"コメント\"\n        placeholder=\"今日やったことに対してコメントを書きます\"\n        value={comment}\n        onChange={commentChanger}\n      />\n      <div className={ classes.mt20 }></div>\n      <InputCard\n        title=\"翌営業日の予定\"\n        placeholder=\"翌営業日の予定を箇条書きします\"\n        value={todo}\n        onChange={todoChanger}\n      />\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.formButton + ' ' + classes.mt20}\n          onClick={messageSender}\n        >送信</Button>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Form;\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  formInnerContainer: {\n    padding: theme.spacing(3, 2),\n  },\n  formTypography: {\n    marginTop: 20\n  },\n  formButton: {\n    marginTop: 20,\n    justifyContent: 'center'\n  }\n}));\n\nfunction WebhookPaper () {\n  const [url, setUrl] = useState(() => {\n    let urlOnLocalStorage = window.localStorage.getItem('webhook');\n\n    if (urlOnLocalStorage === null) {\n      return '';\n    }\n\n    return urlOnLocalStorage;\n  });\n\n  const submitWebhookUrl = () => {\n    window.localStorage.setItem('webhook', url);\n    alert('登録しました');\n  }\n\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.formInnerContainer}>\n      <Typography\n        variant=\"h5\"\n        component=\"h5\"\n        className={classes.formTypography}\n      >Webhook URL</Typography>\n      <TextField\n        placeholder=\"Slack Incoming WebhookのURL\"\n        multiline={false}\n        fullWidth={true}\n        value={url}\n        onChange={event => setUrl(event.target.value)}\n      />\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.formButton}\n          onClick={submitWebhookUrl}\n        >登録</Button>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default WebhookPaper;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  paperStyle: {\n    padding: theme.spacing(3, 2),\n  },\n  formTypography: {\n    marginTop: 20\n  },\n  innerGrid: {\n    marginTop: 20,\n    textAlign: 'center'\n  }\n}));\n\nfunction ResetParameterPaper () {\n  const resetDateStamp = () => {\n    window.localStorage.removeItem('last_commit');\n    alert('リセットしました。');\n  }\n\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.paperStyle}>\n      <Typography\n        variant=\"h5\"\n        component=\"h5\"\n        className={classes.formTypography}\n      >パラメータのリセット</Typography>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        className={classes.myGrid}\n      >\n        <Grid item xs={4} className={classes.innerGrid}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={resetDateStamp}\n          >投稿日時</Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default ResetParameterPaper;\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport WebhookPaper from '../components/setting/WebhookPaper';\nimport ResetParameterPaper from '../components/setting/ResetParameterPaper';\n\nconst useStyles = makeStyles(() => ({\n  paperMarginTop: {\n    marginTop: 20\n  }\n}));\n\nfunction SettingContainer () {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <WebhookPaper />\n      <div className={classes.paperMarginTop}></div>\n      <ResetParameterPaper />\n    </div>\n  );\n}\n\nexport default SettingContainer;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Container from '@material-ui/core/Container';\n\nimport HeaderBar from '../components/headerBar';\nimport Form from '../containers/form';\nimport SettingContainer from '../containers/setting';\n\nconst useStyle = makeStyles({\n  rootContainer: {\n    marginTop: 20\n  }\n});\n\nfunction App() {\n  const classes = useStyle();\n\n  return (\n    <Router>\n      <HeaderBar />\n      <Container maxWidth=\"md\" className={classes.rootContainer}>\n        <Switch>\n          <Route path='/' component={Form} exact />\n          <Route path='/setting' component={SettingContainer} exact />\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}